{"remainingRequest":"/Users/brianphan/jets/course-catalog-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/course-catalog-v2/src/components/FiltersPreview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brianphan/jets/course-catalog-v2/src/components/FiltersPreview.vue","mtime":1609282060285},{"path":"/Users/brianphan/jets/course-catalog-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/course-catalog-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/brianphan/jets/course-catalog-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/course-catalog-v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n\tname : 'filters-preview',\n\n\tprops : {\n\t\tmaxVisible : {\n\t\t\trequired : true,\n\t\t},\n\t\tfilteredCourses : {\n\t\t\trequired : true\n\t\t},\n\t},\n\n\tcomputed : {\n\t\tselectedFilters() {\n\t\t\treturn this.$store.state.selectedFilters;\n\t\t},\n\n\t\tfilters() {\n\t\t\treturn this.$store.state.filters;\n\t\t},\n\n\t\tfiltersPreview() {\n\t\t\tconst { selectedFilters } = this;\n\t\t\tconst filterKeys          = Object.keys( selectedFilters );\n\n\t\t\tif ( !this.filters.length ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tconst filters = this.filters.reduce( ( obj, filter ) => {\n\t\t\t\tobj[filter.key] = filter; // eslint-disable-line\n\n\t\t\t\treturn obj;\n\t\t\t}, {} );\n\n\t\t\tconst appliedFilterKeys = filterKeys.filter( ( key ) => {\n\t\t\t\tconst filter = filters[key];\n\t\t\t\tconst { type } = filter;\n\n\t\t\t\tswitch ( type ) {\n\t\t\t\t\tcase 'list':\n\t\t\t\t\t\tif ( filter.options[0].value === selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'multi-list':\n\t\t\t\t\t\tif ( filter.options[0].value === selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\tif ( !selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'arbitrary':\n\t\t\t\t\t\tif ( !selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\t\treturn appliedFilterKeys.reduce( ( appliedFilters, key ) => {\n\t\t\t\tconst filter         = filters[key];\n\t\t\t\tconst { type, name } = filter;\n\n\t\t\t\tconst value = ( () => {\n\t\t\t\t\tlet v;\n\t\t\t\t\tlet option;\n\t\t\t\t\tconst selected = this.selectedFilters[key];\n\n\t\t\t\t\tswitch ( type ) {\n\t\t\t\t\t\tcase 'list':\n\t\t\t\t\t\t\toption = filter.options.find( a => a.value === selected );\n\t\t\t\t\t\t\tv = option.value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'multi-list':\n\t\t\t\t\t\t\toption = filter.options.find( a => a.value === selected );\n\t\t\t\t\t\t\tv = option.value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tv = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'arbitrary':\n\t\t\t\t\t\t\tv = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// should never reach this\n\t\t\t\t\t\t\tconsole.error( `UNEXPECTED TYPE: ${type} FOUND. EXPECTED 'boolean' OR 'dropdown'. UNABLE TO CREATE PREVIEW FOR THIS FILTER` );\n\t\t\t\t\t\t\tv = {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn v;\n\t\t\t\t} )();\n\n\t\t\t\treturn appliedFilters.concat( [{\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\tvalue,\n\t\t\t\t\tkey\n\t\t\t\t}] );\n\t\t\t}, [] );\n\t\t}\n\n\t},\n\n\tmethods : {\n\t\tclearFilter( filterToClear ) {\n\t\t\tconst { type, key } = filterToClear;\n\t\t\tlet payload;\n\t\t\tlet filter;\n\t\t\tlet defaultVal;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'arbitrary':\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\tbreak;\n\n\n\t\t\t\tcase 'list':\n\t\t\t\t\tfilter     = this.filters.find( a => a.key === key );\n\t\t\t\t\tdefaultVal = filter.options[0].value;\n\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'multi-list':\n\t\t\t\t\tfilter     = this.filters.find( a => a.key === key );\n\t\t\t\t\tdefaultVal = filter.options[0].value;\n\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\tresetFilters() {\n\t\t\t// reset each filter\n\t\t\tthis.filters.forEach( ( filter ) => {\n\t\t\t\tconst { key, type } = filter;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'boolean': {\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'arbitrary': {\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'list': {\n\t\t\t\t\t\tconst defaultVal = filter.options[0].value;\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'multi-list': {\n\t\t\t\t\t\tconst defaultVal = filter.options[0].value;\n\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} );\n\t\t}\n\t}\n\n};\n",{"version":3,"sources":["FiltersPreview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","file":"FiltersPreview.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\n\t.filters-preview(v-if='filtersPreview.length && filteredCourses.length < maxVisible')\n\t\t.explanation\n\t\t\tp.small Not seeing what you expect?\n\t\t\tp.small Try clearing some of the filters you've applied.\n\t\t.filter-group\n\t\t\t.filter(\n\t\t\t\tv-for='filter in filtersPreview'\n\t\t\t)\n\t\t\t\t.text\n\t\t\t\t\tp(v-if='filter.type === \"list\" || filter.type === \"multi-list\"') {{ filter.key }}: {{ filter.value }}\n\t\t\t\t\tp(v-else-if='filter.type === \"boolean\" || filter.type === \"arbitrary\"') {{ filter.key }} only\n\t\t\t\t.icon-close(@click='clearFilter( filter )')\n\t\t\t.clear-all(v-if='filtersPreview.length > 1' @click='resetFilters') Clear All\n</template>\n\n<script>\nexport default {\n\tname : 'filters-preview',\n\n\tprops : {\n\t\tmaxVisible : {\n\t\t\trequired : true,\n\t\t},\n\t\tfilteredCourses : {\n\t\t\trequired : true\n\t\t},\n\t},\n\n\tcomputed : {\n\t\tselectedFilters() {\n\t\t\treturn this.$store.state.selectedFilters;\n\t\t},\n\n\t\tfilters() {\n\t\t\treturn this.$store.state.filters;\n\t\t},\n\n\t\tfiltersPreview() {\n\t\t\tconst { selectedFilters } = this;\n\t\t\tconst filterKeys          = Object.keys( selectedFilters );\n\n\t\t\tif ( !this.filters.length ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tconst filters = this.filters.reduce( ( obj, filter ) => {\n\t\t\t\tobj[filter.key] = filter; // eslint-disable-line\n\n\t\t\t\treturn obj;\n\t\t\t}, {} );\n\n\t\t\tconst appliedFilterKeys = filterKeys.filter( ( key ) => {\n\t\t\t\tconst filter = filters[key];\n\t\t\t\tconst { type } = filter;\n\n\t\t\t\tswitch ( type ) {\n\t\t\t\t\tcase 'list':\n\t\t\t\t\t\tif ( filter.options[0].value === selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'multi-list':\n\t\t\t\t\t\tif ( filter.options[0].value === selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\tif ( !selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'arbitrary':\n\t\t\t\t\t\tif ( !selectedFilters[key] ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\t\treturn appliedFilterKeys.reduce( ( appliedFilters, key ) => {\n\t\t\t\tconst filter         = filters[key];\n\t\t\t\tconst { type, name } = filter;\n\n\t\t\t\tconst value = ( () => {\n\t\t\t\t\tlet v;\n\t\t\t\t\tlet option;\n\t\t\t\t\tconst selected = this.selectedFilters[key];\n\n\t\t\t\t\tswitch ( type ) {\n\t\t\t\t\t\tcase 'list':\n\t\t\t\t\t\t\toption = filter.options.find( a => a.value === selected );\n\t\t\t\t\t\t\tv = option.value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'multi-list':\n\t\t\t\t\t\t\toption = filter.options.find( a => a.value === selected );\n\t\t\t\t\t\t\tv = option.value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tv = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'arbitrary':\n\t\t\t\t\t\t\tv = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// should never reach this\n\t\t\t\t\t\t\tconsole.error( `UNEXPECTED TYPE: ${type} FOUND. EXPECTED 'boolean' OR 'dropdown'. UNABLE TO CREATE PREVIEW FOR THIS FILTER` );\n\t\t\t\t\t\t\tv = {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn v;\n\t\t\t\t} )();\n\n\t\t\t\treturn appliedFilters.concat( [{\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\tvalue,\n\t\t\t\t\tkey\n\t\t\t\t}] );\n\t\t\t}, [] );\n\t\t}\n\n\t},\n\n\tmethods : {\n\t\tclearFilter( filterToClear ) {\n\t\t\tconst { type, key } = filterToClear;\n\t\t\tlet payload;\n\t\t\tlet filter;\n\t\t\tlet defaultVal;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'arbitrary':\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\tbreak;\n\n\n\t\t\t\tcase 'list':\n\t\t\t\t\tfilter     = this.filters.find( a => a.key === key );\n\t\t\t\t\tdefaultVal = filter.options[0].value;\n\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'multi-list':\n\t\t\t\t\tfilter     = this.filters.find( a => a.key === key );\n\t\t\t\t\tdefaultVal = filter.options[0].value;\n\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\tresetFilters() {\n\t\t\t// reset each filter\n\t\t\tthis.filters.forEach( ( filter ) => {\n\t\t\t\tconst { key, type } = filter;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'boolean': {\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'arbitrary': {\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : false,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'list': {\n\t\t\t\t\t\tconst defaultVal = filter.options[0].value;\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'multi-list': {\n\t\t\t\t\t\tconst defaultVal = filter.options[0].value;\n\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue : defaultVal\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.$store.dispatch( 'selectFilter', payload );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} );\n\t\t}\n\t}\n\n};\n</script>\n\n\n<style lang=\"scss\">\n@import '@/assets/variables.scss';\n\n.filters-preview {\n\tposition: relative;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tmargin: 30px 0;\n\tmax-width: calc(100% - 30px);\n\n\t.explanation {\n\n\t\tp {\n\t\t\tfont-size: 14px;\n\t\t\ttext-align: center;\n\t\t}\n\t}\n\n\t.filter-group {\n\t\tbackground: white;\n\t\tborder-radius: 10px;\n\t\tbox-shadow: $floatingObject;\n\t\tmargin-top: 15px;\n\t\toverflow: hidden;\n\n\t\t.filter,\n\t\t.clear-all {\n\t\t\tpadding: 15px;\n\t\t}\n\n\t\t.filter {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: space-between;\n\n\t\t\t.text {\n\t\t\t\tpadding-right: 15px;\n\t\t\t}\n\n\t\t\t&:not(:nth-child(1)) {\n\t\t\t\tborder-top: 1px solid $lightGrey;\n\t\t\t}\n\t\t}\n\n\t\t.clear-all {\n\t\t\tbackground: $cancel;\n\t\t\tcolor: white;\n\t\t\tfont-weight: 600;\n\t\t\tcursor: pointer;\n\t\t\ttext-align: center;\n\t\t}\n\t}\n}\n\n</style>\n"]}]}